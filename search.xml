<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git介绍</title>
    <url>/posts/f3f.html</url>
    <content><![CDATA[<h3 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h3><p>在Git诞生之前，Linux内核开发过程中使用BitKeeper来作为VCS。BitKeeper提供当时的一些开源VCS（如RCS、CVS）所不能提供的高级操作。然而，在2005年春天，当BitKeeper的所有方对他们的免费版BitKeeper加入了额外的限制时，Linux社区意识到，使用BitKeeper不再是一个长期可行的解决方案。</p>
<p>Git于2005年4月诞生了。不久之后，Linux内核的第一个提交也诞生了。这一次提交将整个Linux内核导入Git版本库中。这次提交的统计信息如下：</p>
<pre class=" language-bash"><code class="language-bash">17291 files changed, 6718755 insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>，0 deletions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>。</code></pre>
<p>是的，这次提交足足引入了670万行代码。</p>
<h3 id="先例"><a href="#先例" class="headerlink" title="先例"></a>先例</h3><p>源码控制系统（Source Code Control System, SCCS）是UNIX上最初的几个系统之一，由M.J.Rochkind于20世纪70年代早期开发。这是可以运行在UNIX系统上最早的VCS。</p>
<p>SCCS 提供的数据存储中心称为“版本库”（repository），而这个基本概念一直沿用至今。SCCS 同样提供了一个简单的锁模型来保证开发过程有序。如果一个开发人员需要运行或者测试一个程序，他需要将该程序解锁并检出。然而，如果他想修改某个文件，他则需要锁定并检出（通过 UNIX 文件系统执行的转换）。当编辑完成以后，他又可以将文件检入到版本库中并解锁它。</p>
<p>修订控制系统（Revision Control System，RCS）由 Walter F. Tichy 于 20 世纪 80 年代早期引入。RCS 引入了双向差异的概念，来提高文件不同版本的存储效率。</p>
<p>并行版本系统（Concurrent Version System，CVS）由 Dick Grune 于 1986 年设计并最初实现。4 年后又被Berliner 和他的团队融入 RCS 模型重新实现，这次实现非常成功。CVS 变得非常流行，并且成为<a href="https://opensource.org/">开源社区</a>许多年的事实标准。CVS 相对 RCS 有多项优势，包括分布式开发和版本库范围内对整个“模块”的更改集。</p>
<p>此外，CVS 引入了一个关于“锁”的新范式。而之前的系统需要开发人员在修改某个文件之前先锁定它， 一个文件同时只允许一个开发人员进行修改，所有需要修改这个文件的开发人员需要有序等候。CVS 给予每个开发人员对于自己的私有版本写的权限。因此，不同开发人员的改动可以自动合并，除非两个开发人员尝试修改同一行。如果出现修改同一行的情况，那这一行将会作为“冲突”被标记出来，由开发 人员手动去解决。这个关于“锁”的新规则使得多个开发人员可以并行地编写代码。</p>
<p>就像经常发生的那样，对 CVS 短处和缺点的改进，促进了新 VCS 的诞生：Subversion（SVN）。SVN 于 2001 年问世，迅速风靡了开源社区。不像 CVS，SVN 以原子方式提交改动部分，并且更好地支持分支。 BitKeeper 和 Mercurial 则彻底抛弃了上述所有解决方案。它们淘汰了中心版本库的概念，取而代之的，数据的存储是分布式的，每个开发人员都拥有自己可共享的版本库副本。Git 则是从这种端点对端点（Peer to Peer）的模型继承而来。</p>
<p>最后，Mercurial 和 Monotone 首创了用散列指纹来唯一标识文件的内容，而文件名只是个“绰号”，旨在方便用户操作，再没有别的作用。Git 沿用了这个概念。从内部实现上来说，Git 的文件标识符基于文件的内容，这是一个叫做“内容可寻址文件存储”（Content Addressable File Store，CAFS）的概念。这不是一个新概念。见<a href="https://www.usenix.org/legacy/events/fast02/quinlan/quinlan_html/index.html">“The Venti Filesystem,” (Plan 9)</a>, Bell Labs,  据 Linus 的说法3，Git 直接从 Monotone 借用了这个概念。Mercurial 也同时实现了这个概念。</p>
<h3 id="名字含义"><a href="#名字含义" class="headerlink" title="名字含义"></a>名字含义</h3><p>据Linus宣称，命名Git，是因为“我是一个自私的混蛋，我照着自己命名我所有的项目，先是Linux，现在是Git。”倘若，Linux这个名字是Linus和Minix的某种结合。那么反用一个表示愚蠢无用之人的英语词汇也不是没可能。</p>
<p>那之后，也有人曾建议，使用一些其它也许更让人舒服的解释。其中最受欢迎的一个就是：全局信息追踪器（Global Information Tracker）。</p>
<h3 id="版本管理的演变"><a href="#版本管理的演变" class="headerlink" title="版本管理的演变"></a>版本管理的演变</h3><p>VCS出现前</p>
<ul>
<li>用目录拷贝区别不同的版本</li>
<li>公共文件容易被覆盖</li>
<li>成员沟通成本很高，代码集成效率低下</li>
</ul>
<img src="https://s1.ax1x.com/2020/09/20/wTkMUU.md.png" alt="VSC出现之前" style="zoom:50%;">

<p>集中式VCS</p>
<ul>
<li>有集中的版本管理服务器</li>
<li>具备文件版本管理和分支管理能力</li>
<li>集成效率有明显的提高</li>
<li>客户端必须时刻和服务器相连</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/09/20/wTkKET.md.png" alt="集中式VCS"></p>
<p>分布式VCS</p>
<ul>
<li>服务端和客户端都有完整的版本库</li>
<li>脱离服务端，客户端照样可以管理版本</li>
<li>查看历史和版本比较等多数操作，都不需要访问服务器，比集中式VCS更能提高版本管理效率。</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/09/20/wTkQ5F.md.png" alt="分布式VCS"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/posts/1b99.html</url>
    <content><![CDATA[<h3 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h3><p>把已有的项目代码纳入Git管理</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> 项目代码所在的文件夹
$ <span class="token function">git</span> init</code></pre>
<p>新建的项目直接用Git管理</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> 某个文件夹
$ <span class="token function">git</span> init your_project <span class="token comment" spellcheck="true"># 会在当前项目下创建和项目名称同名的文件夹</span>
$ <span class="token function">cd</span> your_project</code></pre>
<h3 id="查看提交"><a href="#查看提交" class="headerlink" title="查看提交"></a>查看提交</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 条目按照从最新的到最老的顺序罗列出来</span>
$ <span class="token function">git</span> log 
<span class="token comment" spellcheck="true"># 查看特定提交更加详细的信息</span>
$ <span class="token function">git</span> show commitId 
<span class="token comment" spellcheck="true"># 查看当前分支的最近10次提交</span>
$ <span class="token function">git</span> show-branch --more<span class="token operator">=</span>10
<span class="token comment" spellcheck="true"># 查看简洁信息</span>
$ <span class="token function">git</span> log --oneline
<span class="token comment" spellcheck="true"># 显示最近四次提交的简介信息</span>
$ <span class="token function">git</span> log -n4 --oneline</code></pre>
<h3 id="版本库内文件的删除和重命名"><a href="#版本库内文件的删除和重命名" class="headerlink" title="版本库内文件的删除和重命名"></a>版本库内文件的删除和重命名</h3><p>文件删除</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 表示你想要删除这个文件的意图并暂存这个变更</span>
$ <span class="token function">git</span> <span class="token function">rm</span> poem.html
<span class="token comment" spellcheck="true"># 在版本库里实现这个变更</span>
$ <span class="token function">git</span> commit -m <span class="token string">"Remove a poem"</span></code></pre>
<p>文件重命名</p>
<ul>
<li>方式一</li>
</ul>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">mv</span> foo.html bar.html <span class="token comment" spellcheck="true"># 防止git命令会把foo.html从文件系统中永久删除</span>
$ <span class="token function">git</span> <span class="token function">rm</span> foo.html
$ <span class="token function">git</span> add bar.html</code></pre>
<ul>
<li>方式二</li>
</ul>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">mv</span> foo.html bar.html</code></pre>
<h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 暂存区已经修改的添加进去</span>
$ <span class="token function">git</span> add -u
<span class="token comment" spellcheck="true"># 暂存区的修改全部抹除掉</span>
$ <span class="token function">git</span> reset --hard
<span class="token comment" spellcheck="true"># 根据commitId检索分支</span>
$ <span class="token function">git</span> checkout -b temp dc8aff7
<span class="token comment" spellcheck="true"># 切换到master分支</span>
$ <span class="token function">git</span> checkout master
<span class="token comment" spellcheck="true"># 显示分支</span>
$ <span class="token function">git</span> branch -av
<span class="token comment" spellcheck="true"># 显示所有分支的提价信息</span>
$ <span class="token function">git</span> log --all
<span class="token comment" spellcheck="true"># 图像化的方式展示提交信息</span>
$ <span class="token function">git</span> log --all --graph
<span class="token comment" spellcheck="true"># 以浏览器的方式打开git帮助文档</span>
$ <span class="token function">git</span> <span class="token function">help</span> --web log
<span class="token comment" spellcheck="true"># 查看帮助命令</span>
$ <span class="token function">git</span> <span class="token function">help</span> --all</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git目录</title>
    <url>/posts/9d17.html</url>
    <content><![CDATA[<h3 id="git目录"><a href="#git目录" class="headerlink" title="git目录"></a>git目录</h3><p><img src="https://s1.ax1x.com/2020/09/20/w70pxe.md.png" alt="Git目录"></p>
<p>head：显示当前所在分支</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .git/HEAD
ref: refs/heads/master</code></pre>
<p>config: 本地的配置信息</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .git/config
<span class="token punctuation">[</span>core<span class="token punctuation">]</span>
    repositoryformatversion <span class="token operator">=</span> 0
    filemode <span class="token operator">=</span> <span class="token boolean">true</span>
    bare <span class="token operator">=</span> <span class="token boolean">false</span>
    logallrefupdates <span class="token operator">=</span> <span class="token boolean">true</span>
    ignorecase <span class="token operator">=</span> <span class="token boolean">true</span>
    precomposeunicode <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">[</span>remote <span class="token string">"origin"</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> git@github.com:AsiaMa/xunfeiasia.git
    fetch <span class="token operator">=</span> +refs/heads/*:refs/remotes/origin/*
<span class="token punctuation">[</span>branch <span class="token string">"master"</span><span class="token punctuation">]</span>
    remote <span class="token operator">=</span> origin
    merge <span class="token operator">=</span> refs/heads/master
<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
    name <span class="token operator">=</span> xiu
    email <span class="token operator">=</span> xiu@163.com</code></pre>
<p>refs: 里面有heads、remotes、tags三个文件夹</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> refs
$ ll
drwxr-xr-x  5 asiama  staff   160B  9 21 21:59 heads
drwxr-xr-x  3 asiama  staff    96B  9 20 20:26 remotes
drwxr-xr-x  2 asiama  staff    64B  9 20 20:26 tags
$ <span class="token function">cd</span> heads
$ ll
-rw-r--r--  1 asiama  staff    41B  9 20 20:26 master
-rw-r--r--  1 asiama  staff    41B  9 20 22:18 temp
$ <span class="token function">cat</span> master
3aadece1f41abceaca380ff25d9872da112644e4 <span class="token comment" spellcheck="true">#master分支最新提交</span>
$ <span class="token function">git</span> cat-file -t 3aadece1f41abceaca380ff25d9872da112644e4
commit
$ <span class="token function">cat</span> temp
dc8aff7c2cce1c3956113e701f54f43585a4e730 <span class="token comment" spellcheck="true">#temp分支最新提交</span>
$ <span class="token function">git</span> cat-file -t dc8aff7c2cce1c3956113e701f54f43585a4e730
commit</code></pre>
<p>objects: 核心文件夹</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> objects
$ ll
drwxr-xr-x  3 asiama  staff    96B  9 21 21:59 57
drwxr-xr-x  3 asiama  staff    96B  9 21 21:59 9d
drwxr-xr-x  3 asiama  staff    96B  9 21 21:57 b9
drwxr-xr-x  2 asiama  staff    64B  9 20 20:26 info
drwxr-xr-x  4 asiama  staff   128B  9 20 20:26 pack <span class="token comment" spellcheck="true"># 松散的文件比较多时，会进行打包放在这里面</span>
$ <span class="token function">cd</span> 57
0d12a33be783aeb557d44c17f66ac17cec10d7
<span class="token comment" spellcheck="true"># 需要前面拼接57</span>
$ <span class="token function">git</span> cat-file -t 570d12a33be783aeb557d44c17f66ac17cec10d7
commit
<span class="token comment" spellcheck="true"># 再看b9</span>
$ <span class="token function">cd</span> <span class="token punctuation">..</span>
$ <span class="token function">ls</span> b9/
67cf8fdb60314c33f2bceacd8ff1c4567f5b53
<span class="token comment" spellcheck="true"># 需要前面拼接b9</span>
$ <span class="token function">git</span> cat-file -t b967cf8fdb60314c33f2bceacd8ff1c4567f5b53
blob
$ <span class="token function">git</span> cat-file -p b967cf8fdb60314c33f2bceacd8ff1c4567f5b53
<span class="token comment" spellcheck="true"># 提交的文件里的内容</span>
ifjksjdfkfldjslfj
费德勒快速反击撒了接口
的快感和附近的恐慌感
ijdk
$ <span class="token function">ls</span> 9d/
a73a42ec544fe149927f595a4fec01ea3f5018
<span class="token comment" spellcheck="true"># 需要前面拼接9d</span>
$ <span class="token function">git</span> cat-file -t 9da73a42ec544fe149927f595a4fec01ea3f5018
tree
$ <span class="token function">git</span> cat-file -p 9da73a42ec544fe149927f595a4fec01ea3f5018
100644 blob 39fb081a42a86ccf8f9cf99dbccc8bdf7c828bce    .gitignore
040000 tree b0feff2525390e998fe1c6fa596956d0b1cc3fb0    .idea
100644 blob 72b6f3f4f7b1a4900057c2776a0dac63171ab9ff    README.md
040000 tree b73d8756304943ab811652d55582c54ffeb4b494    app
100644 blob 31fb06fc06923bbe3d0abf746498eb32069f778d    build.gradle
100644 blob aac7c9b4614ccfde6c721f24994cf30885a791d0    gradle.properties
040000 tree f76200a0891f6681e508b4af256edd7db7e0a929    gradle
100644 blob 9d82f78915133e1c35a6ea51252590fb38efac2f    gradlew
100644 blob 8a0b282aa6885fb573c106b3551f7275c5f17e8e    gradlew.bat
040000 tree 460455f25404eb4775c79dbba28fb5c1a870173b    mylibrary
100644 blob 9c982a3ebd0288b2ed9bff0c1da11828cb396b28    settings.gradle
100644 blob b967cf8fdb60314c33f2bceacd8ff1c4567f5b53    <span class="token function">test</span></code></pre>
<h3 id="Git对象类型"><a href="#Git对象类型" class="headerlink" title="Git对象类型"></a>Git对象类型</h3><p>对象库是Git版本库实现的心脏。它包含你的原始数据文件和所有日志信息、作者信息、日期，以及其它用来重建项目任意版本或分支的信息。</p>
<p>Git放在对象库里的对象只有4种类型：块（blob）、目录树（tree）、提交（commit）和标签（tag）。这4种原子对象构成Git高层数据结构的基础。</p>
<h4 id="块（blob）"><a href="#块（blob）" class="headerlink" title="块（blob）"></a>块（blob）</h4><p>文件的每一个版本表示为一个块（blob）。blob是“二进制大对象”（binary  large  object）的缩写，是计算机领域的常用术语，用来指代某些可以包含任意数据的变量或文件，同时其内部结构会被程序忽略。一个blob被视为一个黑盒。一个blob保存一个文件的数据，但不包含任何关于这个文件的元数据，甚至连文件名也没有「只要文件内容相同，在git眼里就是同一个blob，只有一份」。</p>
<h4 id="目录树（tree）"><a href="#目录树（tree）" class="headerlink" title="目录树（tree）"></a>目录树（tree）</h4><p>一个目录树（tree）对象代表一层目录信息。它记录blob标识符、路径名和在一个目录里所有文件的一些元数据。它也可以递归引用其他目录树或子树对象，从而建立一个包含文件和子目录的完整层次结构。</p>
<h4 id="提交（commit）"><a href="#提交（commit）" class="headerlink" title="提交（commit）"></a>提交（commit）</h4><p>一个提交（commit）对象保存版本库中每一次变化的元数据，包括作者、提交者、提交日期和日志消息。每一个提交对象指向一个目录树对象，这个目录树对象在一张完整的快照中捕获提交时版本库的状态。最初的提交或者根提交（root commit）是没有父提交的。大多数提交都有一个父提交。</p>
<h4 id="标签（tag）"><a href="#标签（tag）" class="headerlink" title="标签（tag）"></a>标签（tag）</h4><p>一个标签对象分配一个任意的且人类可读的名字给一个特定对象，通常是一个提交对象。虽然9da581d910c9c4ac93557ca4859e767f5caf5169指的是一个确切且定义好的提交，但是一个更熟悉的标签名（如Ver-1.0-Alpha）可能会更有意义！</p>
<p>随着时间的推移，所有信息在对象库中会变化和增长，项目的编辑、添加和删除都会被跟踪和建模。为了有效地利用磁盘空间和网络带宽，Git把对象压缩并存储在打包文件（packfile）里，这些文件也在对象库里。</p>
<p><img src="https://s1.ax1x.com/2020/09/22/wXAqaj.md.png" alt="对象之间的关系"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/3eeb.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>使用Git之前需要做的最小配置</title>
    <url>/posts/5174.html</url>
    <content><![CDATA[<h3 id="配置user-name-和-user-email"><a href="#配置user-name-和-user-email" class="headerlink" title="配置user.name 和 user.email"></a>配置user.name 和 user.email</h3><p>全局配置「对当前用户所有仓库有效」</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"your_name"</span>
$ <span class="token function">git</span> config --global user.email <span class="token string">"your_email"</span></code></pre>
<p>缺省等同于local「只对某个仓库有效」</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --local user.name <span class="token string">"your_name"</span>
$ <span class="token function">git</span> config --local user.email <span class="token string">"your_email"</span></code></pre>
<p>系统配置「对系统所有登录的用户有效」</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --system user.name <span class="token string">"your_name"</span>
$ <span class="token function">git</span> config --system user.email <span class="token string">"your_email"</span></code></pre>
<h3 id="显示config的配置"><a href="#显示config的配置" class="headerlink" title="显示config的配置"></a>显示config的配置</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --list --local
$ <span class="token function">git</span> config --list --global
$ <span class="token function">git</span> config --list --system</code></pre>
<h3 id="查看某一个属性"><a href="#查看某一个属性" class="headerlink" title="查看某一个属性"></a>查看某一个属性</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name</code></pre>
<h3 id="移除设置"><a href="#移除设置" class="headerlink" title="移除设置"></a>移除设置</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --unset --global user.email</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
